====================
HOMEWORK P07 RESULTS
====================

Fall 2024


FULL CREDIT
===========

NOTE: These are measurements which may vary plus your opinions which may vary a LOT. We won't grade for "correctness", just completeness.

QUESTION 1: What Boggle command line arguments ([#boards] and if not default [boardSize])did you use to achieve a 30 to 45 second runtime? Note: We're only interested in the "real" seconds for this question.

Command: time java Boggle 80 - 10 -

I used 10 threads on 80 boards, the rest are the default values


QUESTION 2: Provide the full output (including the time command) for your program, with 1 to 16 threads. **Ensure that the result is the same for all 16 runs.** With bash, you can run all of these with a single command if you like, replacing "90" with whatever Boggle command line arguments you identified in QUESTION 1: 

for i in {1..16} ; do echo ; echo $i Threads; time java Boggle 90 - $i ; done

1 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  37.69s user 1.00s system 102% cpu 37.678 total

2 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  34.62s user 0.61s system 203% cpu 17.351 total

3 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  27.05s user 0.42s system 292% cpu 9.397 total

4 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  24.74s user 0.36s system 396% cpu 6.332 total

5 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  30.51s user 0.40s system 500% cpu 6.181 total

6 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  31.09s user 0.46s system 509% cpu 6.189 total

7 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  30.77s user 0.52s system 552% cpu 5.658 total

8 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  30.57s user 0.56s system 774% cpu 4.022 total

9 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  26.12s user 0.63s system 478% cpu 5.590 total

10 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  32.59s user 0.88s system 928% cpu 3.605 total

11 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  34.27s user 1.23s system 759% cpu 4.675 total

12 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  35.46s user 1.09s system 604% cpu 6.049 total

13 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  24.93s user 1.29s system 884% cpu 2.963 total

14 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  36.87s user 1.40s system 472% cpu 8.104 total

15 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  37.56s user 1.18s system 670% cpu 5.779 total

16 Threads
Hash is 0xDB1C1B50

Found 29403 solutions
java Boggle 80 - $i  33.64s user 1.31s system 1078% cpu 3.240 total


QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

If you do not add too many threads, they significantly decrease the runtime of the program. If too many threads are added then runtime could increase

QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

Yes, adding threads does add to the system load. While the precentages do not make sense on why they are so large, the user understands that more of the cpu is being used







BONUS
=====

QUESTION 5: Time your version of Boggle as you did for the full credit version. Is this additional layer of threading faster, slower, or roughly equivalent in performance? Why?

This way seems to be faster if the right amount of threads are used (eg Threads 2). Obviously, if only one thread is used then there wont be much of a difference, but it seems if there is an excesive amount of threads used then it does not really matter if you use thread pooling or not.

YOUR Timing:

1 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  55.36s user 1.41s system 101% cpu 55.737 total

2 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  31.50s user 0.53s system 202% cpu 15.840 total

3 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  30.91s user 0.47s system 303% cpu 10.334 total

4 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  27.74s user 0.38s system 379% cpu 7.413 total

5 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  28.57s user 0.40s system 495% cpu 5.849 total

6 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  34.41s user 0.44s system 595% cpu 5.852 total

7 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  29.03s user 0.46s system 484% cpu 6.092 total

8 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  36.20s user 0.64s system 661% cpu 5.572 total

9 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  35.73s user 0.72s system 864% cpu 4.217 total

10 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  36.36s user 0.84s system 943% cpu 3.940 total

11 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  38.54s user 0.93s system 866% cpu 4.553 total

12 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  39.20s user 1.19s system 681% cpu 5.924 total

13 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  36.49s user 1.07s system 494% cpu 7.595 total

14 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  37.24s user 1.13s system 695% cpu 5.518 total

15 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  34.84s user 1.22s system 1081% cpu 3.333 total

16 Threads
Hash is 0x437B7109

Found 33074 solutions
java Boggle 90 - $i  41.61s user 1.40s system 534% cpu 8.042 total
